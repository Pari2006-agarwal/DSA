#include <stdio.h>
#include <stdlib.h>

// Define the Node structure
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Insert a value into BST
struct Node* insert(struct Node* root, int value) {
    if (root == NULL) return createNode(value);

    if (value < root->data)
        root->left = insert(root->left, value);
    else if (value > root->data)
        root->right = insert(root->right, value);

    return root;
}

// Inorder traversal (sorted output)
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

// Search a value in BST
struct Node* search(struct Node* root, int key) {
    if (root == NULL || root->data == key)
        return root;

    if (key < root->data)
        return search(root->left, key);
    else
        return search(root->right, key);
}

// Find minimum value in BST
int findMin(struct Node* root) {
    while (root->left != NULL)
        root = root->left;
    return root->data;
}

// Find maximum value in BST
int findMax(struct Node* root) {
    while (root->right != NULL)
        root = root->right;
    return root->data;
}

// Main function
int main() {
    struct Node* root = NULL;

    // Insert nodes
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 70);
    insert(root, 20);
    insert(root, 40);
    insert(root, 60);
    insert(root, 80);

    printf("Inorder Traversal: ");
    inorder(root);
    printf("\n");

    // Search for a value
    int key = 40;
    struct Node* found = search(root, key);
    if (found)
        printf("Found %d in the BST.\n", key);
    else
        printf("%d not found in the BST.\n", key);

    // Minimum and maximum
    printf("Minimum value: %d\n", findMin(root));
    printf("Maximum value: %d\n", findMax(root));

    return 0;
}
